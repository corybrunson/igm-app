),
tabPanel(
"Discussion", value = "discuss",
h3("Plot Comparison"),
HTML(paste(readLines("text/plot_comparison.txt"),
collapse = "")),
h3("Technical Specs"),
h4("Consensus vs Uncertainty"),
HTML(paste(readLines("text/vs_description.html"),
collapse = "")),
h4("Agreement, Disagreement, and Uncertainty"),
HTML(paste(readLines("text/tri_description.html"),
collapse = ""))
),
tabPanel(
"The Questions", value = "dt",
HTML(paste(readLines("text/dt_description.txt"),
collapse = "")),
fluidRow(
subset_control_panel,
column(9,
dataTableOutput("dt_dt")
)
)
)
)
)
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Load and polish data
source("scripts/polish.R")
# Source triangle coordinate functions (used in server script)
source("scripts/fun_coord.R")
# Server
server <- function(input, output) {
# Highlight by key strings
hlDat <- reactive({
# Obtain "raw" data
dat <- allDat
# Spotlight panelists
if (input$panelist == "-") {
dat[, hl.panelist := FALSE]
} else {
dat[, hl.panelist := panelist == input$panelist]
}
dat[, hl.panelist := any(hl.panelist), by = list(id, question)]
# Spotlight topics
dat[, hl.topic := grepl(tolower(input$topic),
tolower(paste(topic, statement)))]
if (all(dat$hl.topic)) dat$hl.topic <- FALSE
dat[, hl.topic := any(hl.topic), by = list(id, question)]
# Return
dat
})
# Assign point coordinates
xyDat <- reactive({
# Retrieve highlighted data
dat <- hlDat()
# Add vs coordinates to data table
dat[, X := sum((1 - input$conf.wt + input$conf.wt * stdconf) *
as.numeric(agree == 0), na.rm = TRUE) /
sum(1 - input$conf.wt + input$conf.wt * stdconf, na.rm = TRUE),
by = list(id, question)]
dat[, Y := sum(apply(combn(sign(agree), 2), 2, prod), na.rm = TRUE) /
choose(length(which(agree != 0 & !is.na(agree))), 2),
by = list(id, question)]
# Add triangle coordinates to data table
dat[, x := x(c(sum((1 - input$conf.wt + input$conf.wt * stdconf) *
(1 + input$str.wt * strong) *
as.numeric(agree == -1),
na.rm = TRUE),
sum((1 - input$conf.wt + input$conf.wt * stdconf) *
(1 + input$str.wt * strong) *
as.numeric(agree == 1),
na.rm = TRUE),
sum((1 - input$conf.wt + input$conf.wt * stdconf) *
as.numeric(agree == 0), na.rm = TRUE))),
by = list(id, question)]
dat[, y := y(c(sum((1 - input$conf.wt + input$conf.wt * stdconf) *
(1 + input$str.wt * strong) *
as.numeric(agree == -1),
na.rm = TRUE),
sum((1 - input$conf.wt + input$conf.wt * stdconf) *
(1 + input$str.wt * strong) *
as.numeric(agree == 1),
na.rm = TRUE),
sum((1 - input$conf.wt + input$conf.wt * stdconf) *
as.numeric(agree == 0), na.rm = TRUE))),
by = list(id, question)]
# Return
dat
})
# Collapse data over panelists
uniqDat <- reactive({
# Retrieve weighted data
dat <- xyDat()
# Only one entry per question
dat <- unique(dat[, .(id, date, question, topic, statement, count,
hl.panelist, hl.topic,
X, Y,
x, y)])
output$q <- renderText({ nrow(dat) })
# Subset
if (any(dat$hl.panelist) & input$p_subset) dat <- dat[hl.panelist == T]
if (any(dat$hl.topic) & input$t_subset) dat <- dat[hl.topic == T]
if (all(dat$hl.topic)) dat$hl.topic <- FALSE
dat
})
# Versus plot range
range_vs <- reactiveValues(x = c(0, 1), y = c(-1/5, 1))
# Versus plot!
output$vs <- renderPlot({
# Retrieve uniquified data
dat <- uniqDat()
# Plotting window
Xran <- range_vs$x
Yran <- range_vs$y
plot(x = c(), y = c(), bty = "n",
xlim = Xran, ylim = Yran,
xlab = "Uncertainty", ylab = "Consensus")
abline(h = 0, lty = 3, col = rgb(0, 0, 0, sqrt(input$alpha)))
# Points!
points(x = dat$X, y = dat$Y,
pch = 19, cex = input$cex.base * sqrt(dat$count),
col = if (input$t_subset) {
rgb(0, 0, 0, input$alpha)
} else {
rgb(ifelse(dat$hl.topic, 1, 0), 0, 0, input$alpha)
})
# Circles
if (!input$p_subset) {
points(x = dat$X, y = dat$Y,
pch = ifelse(dat$hl.panelist, 1, NA),
cex = 1.5 * input$cex.base * sqrt(dat$count),
col = rgb(0, 0, 1, sqrt(input$alpha)))
}
# Legend
n_questions <- nrow(unique(dat[, .(id, date, question)]))
legend("topright",
legend = paste("Showing", n_questions, "survey questions"),
pch = NA, box.lty = 0)
})
# Versus plot zoom
observeEvent(input$plot_dblclick_vs, {
# Assign brush values
brush_val <- input$plot_brush_vs
# If brush, zoom; otherwise, reset
if (is.null(brush_val)) {
range_vs$x <- c(0, 1)
range_vs$y <- c(-1/5, 1)
} else {
range_vs$x <- c(brush_val$xmin, brush_val$xmax)
range_vs$y <- c(brush_val$ymin, brush_val$ymax)
}
})
# Versus plot range
param_tri <- reactiveValues(x = range(x(c(1, 0, 0)), x(c(0, 0, 1))),
y = range(y(c(1, 0, 0)), y(c(0, 1, 0))),
asp = 1)
# Triangle plot!
output$tri <- renderPlot({
# Retrieve uniquified data
dat <- uniqDat()
# Plotting window
xran <- param_tri$x
yran <- param_tri$y
plot(x = c(), y = c(), axes = FALSE,
asp = param_tri$asp,
xlim = xran + .1 * c(-1, 1) * diff(xran),
ylim = yran + 0 * c(-1, 1) * diff(yran),
xlab = "", ylab = "")
# Triangular frame
for (i in 1:3) {
vec0 <- diag(rep(1, 3))[, i]
vec1 <- diag(rep(1, 3))[, i %% 3 + 1]
segments(x0 = x(vec0), x1 = x(vec1),
y0 = y(vec0), y1 = y(vec1),
lty = 1, lwd = 1,
col = rgb(0, 0, 0, sqrt(input$alpha)))
}
# Corner labels
text(x = apply(diag(rep(1, 3)), 2, x),
y = apply(diag(rep(1, 3)), 2, y),
labels = c("Disagree", "Agree", "Uncertain"),
pos = 3 + c(-1, -1, 1), cex = 1.2)
# Points!
points(x = dat$x, y = dat$y,
pch = 19, cex = input$cex.base * sqrt(dat$count),
col = if (input$t_subset) {
rgb(0, 0, 0, input$alpha)
} else {
rgb(ifelse(dat$hl.topic, 1, 0), 0, 0, input$alpha)
})
# Circles
if (!input$p_subset) {
points(x = dat$x, y = dat$y,
pch = ifelse(dat$hl.panelist, 1, NA),
cex = 1.5 * input$cex.base * sqrt(dat$count),
col = rgb(0, 0, 1, sqrt(input$alpha)))
}
# Legend
n_questions <- nrow(unique(dat[, .(id, date, question)]))
legend("topright",
legend = paste("Showing", n_questions, "survey questions"),
pch = NA, box.lty = 0)
})
# Triangle plot zoom
observeEvent(input$plot_dblclick_tri, {
# Assign brush values
brush_val <- input$plot_brush_tri
# If brush, zoom; otherwise, reset
if (is.null(brush_val)) {
param_tri$x <- range(x(c(1, 0, 0)), x(c(0, 0, 1)))
param_tri$y <- range(y(c(1, 0, 0)), y(c(0, 1, 0)))
param_tri$asp <- 1
} else {
param_tri$x <- c(brush_val$xmin, brush_val$xmax)
param_tri$y <- c(brush_val$ymin, brush_val$ymax)
param_tri$asp <- NA
}
})
# Interactive data tables
make_table <- function(dt) {
# Links
dt$date_link <- paste0('<a href="',
"http://www.igmchicago.org/",
"igm-economic-experts-panel",
"/poll-results?SurveyID=SV_",
dt$id,
'" target="_blank">',
gsub("^0", "", format(dt$date, "%d %b %Y")),
'</a>')
# Format
dt[order(dt$date),
.(Date = date_link,
Topic = topic,
Question = ifelse(question == "", "-", question),
Statement = statement)]
}
# Triangle plot data table
output$dt_tri <- renderDataTable({
# Which points
res <- if(is.null(input$plot_brush_tri)) {
nearPoints(uniqDat(), input$plot_click_tri, "X", "Y")
} else {
brushedPoints(uniqDat(), input$plot_brush_tri, "X", "Y")
}
if (nrow(res) == 0) return() else make_table(res)
}, escape = FALSE)
# Versus plot data table
output$dt_vs <- renderDataTable({
# Which points
res <- if(is.null(input$plot_brush_vs)) {
nearPoints(uniqDat(), input$plot_click_vs, "X", "Y")
} else {
brushedPoints(uniqDat(), input$plot_brush_vs, "X", "Y")
}
if (nrow(res) == 0) return() else make_table(res)
}, escape = FALSE)
# Plotless data table
output$dt_dt <- renderDataTable({
if (nrow(uniqDat())) return() else make_table(uniqDat())
}, escape = FALSE)
}
# Full control panel
full_control_panel <-
column(3,
wellPanel(
#h4("Subsetting"),
selectInput(inputId = "panelist",
label = "Answered by this panelist:",
choices = c("-", sort(unique(allDat$panelist)))),
checkboxInput("p_subset", "Hide others"),
textInput("topic",
"Keyword in regex, e.g. 'gree(k|ce)':"),
checkboxInput("t_subset", "Hide others")
),
wellPanel(
#h4("Positioning"),
sliderInput("str.wt",
"Weight (dis)agreement strength",
0, 1, 0),
sliderInput("conf.wt",
"Weight confidence",
0, 1, 0)
),
wellPanel(
#h4("Appearance"),
sliderInput("cex.base", "Point size", .1, .5, .3),
sliderInput("alpha", "Transparency", 0, 1, .2)
)
)
# Subset control panel
subset_control_panel <-
column(3,
wellPanel(
#h4("Subsetting"),
selectInput(inputId = "panelist",
label = "Answered by this panelist:",
choices = c("-", sort(unique(allDat$panelist)))),
checkboxInput("p_subset", "Hide others"),
textInput("topic",
"Keyword in regex, e.g. 'gree(k|ce)':"),
checkboxInput("t_subset", "Hide others")
)
)
# User interface
ui <- fluidPage(
theme = shinytheme("cosmo"),
titlePanel("Situating consensus for the IGM surveys"),
tabsetPanel(
id = "tab",
tabPanel(
"Introduction", value = "intro",
HTML(paste(readLines("text/description.txt"), collapse = ""))
),
tabPanel(
"Agreement, Disagreement, and Uncertainty", value = "tri",
HTML(paste(c(readLines("text/tri_description.txt"),
readLines("text/plot_guide.txt")),
collapse = "")),
fluidRow(
full_control_panel,
column(9,
plotOutput("tri", height = "667px",
click = "plot_click_tri",
brush = brushOpts(id = "plot_brush_tri",
delayType = "debounce",
resetOnNew = TRUE),
dblclick = "plot_dblclick_tri"),
dataTableOutput("dt_tri")
)
)
),
tabPanel(
"Consensus vs Uncertainty", value = "vs",
HTML(paste(c(readLines("text/vs_description.txt"),
readLines("text/plot_guide.txt")),
collapse = "")),
fluidRow(
full_control_panel,
column(9,
plotOutput("vs", height = "400px",
click = "plot_click_vs",
brush = brushOpts(id = "plot_brush_vs",
delayType = "debounce",
resetOnNew = TRUE),
dblclick = "plot_dblclick_vs"),
dataTableOutput("dt_vs")
)
)
),
tabPanel(
"Discussion", value = "discuss",
h3("Plot Comparison"),
HTML(paste(readLines("text/plot_comparison.txt"),
collapse = "")),
h3("Technical Specs"),
h4("Consensus vs Uncertainty"),
HTML(paste(readLines("text/vs_description.html"),
collapse = "")),
h4("Agreement, Disagreement, and Uncertainty"),
HTML(paste(readLines("text/tri_description.html"),
collapse = ""))
),
tabPanel(
"The Questions", value = "dt",
HTML(paste(readLines("text/dt_description.txt"),
collapse = "")),
fluidRow(
subset_control_panel,
column(9,
dataTableOutput("dt_dt")
)
)
)
)
)
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
# Source server
source("app/server.R")
# Source user interface
# http://hutchinson.belmont.ma.us/tth/manual/sec3.html
source("app/ui.R")
# Run app!
shinyApp(ui = ui, server = server)
